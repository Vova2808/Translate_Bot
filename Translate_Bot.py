# –ë–æ—Ç –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫, –ø–µ—Ä–µ–≤–æ–¥–∏—Ç —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∏ —Å–æ –≤—Å–µ—Ö –Ω–∞ —Ä—É—Å—Å–∫–∏–π.
# –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
#             sudo apt install pip
#             pip install googletrans==3.1.0a0  -–≤–∞–∂–Ω–æ —É—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–º–µ–Ω–Ω–æ —ç—Ç—É –≤–µ—Ä—Å–∏—é –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
#             pip install pyTelegramBotAPI
#             pip install asyncio
#             pip install aiohttp

## –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
from googletrans import Translator
from telebot.async_telebot import AsyncTeleBot
import asyncio
from telebot.types import InlineQuery, InputTextMessageContent
from telebot import types
import random


# –ê–ø–∏ –±–æ—Ç–∞ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —É @BotFather –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ.
bot = AsyncTeleBot("YOUT_TOKEN", parse_mode=None)


print("Bot –ó–∞–ø—É—â–µ–Ω")
emoge = ['üëå', 'üëã', 'üëé', 'üññ', 'üëç', 'üòÉ', 'ü§ì', 'üßê', 'üòé', 'üôÉ', 'ü•≥', 'ü§ñ', 'üëæ']



# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ.
@bot.message_handler(commands=['start'])
async def send_welcome(message):
    random_emoge = random.choice(emoge)
    await bot.reply_to(message, random_emoge)
    await bot.reply_to(message,'------\n'
                 + '–ü—Ä–∏–≤–µ—Ç, '
                 + message.from_user.first_name
                 + ' \n–Ø –º–æ–≥—É –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π \n–ò —Å –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–∏–π '
                 +'\n------')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help.
@bot.message_handler(commands=['help'])
async def send_welcome(message):
    await bot.reply_to(message,'------\n'
                 + '–ü—Ä–æ—Å—Ç–æ –≤–≤–æ–¥–∏ —Ç–µ–∫—Å—Ç –∏ –Ω–∞–∂–∏–º–∞–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å\n'
                 + '–Ø —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª—é –∫–∞–∫–æ–π —ç—Ç–æ —è–∑—ã–∫\n'
                 + '–ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–≤–µ–ª, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑\n'
                 + '–ü–µ—Ä–µ–≤–æ–¥ –≥—É–≥–ª'
                 +'\n------')



@bot.message_handler()
async def user_text(message):
    translator = Translator()
    lang = translator.detect(message.text)
    lang = lang.lang


    if lang == 'ru':
        send = translator.translate(message.text)
        await bot.reply_to(message, '------\n'+ send.text +'\n------')


    else:
        send = translator.translate(message.text, dest='ru')
        await bot.reply_to(message, '------\n'+ send.text +'\n------')


@bot.message_handler(content_types=['photo'])
async def handle_image(message):
    translator = Translator()

    chat_id = message.chat.id
    photo = message.photo[-1].file_id
    caption = message.caption

    lang = translator.detect(caption)
    lang = lang.lang

    if lang == 'ru':
        send = translator.translate(caption)

    else:
        send = translator.translate(caption, dest='ru')
    await bot.send_photo(chat_id, photo, caption=send.text)


@bot.inline_handler(lambda query: True)
async def inline_query(query):
    results = []
    translator = Translator()
    text = query.query.strip()

    # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π, –Ω–µ –¥–µ–ª–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥
    if not text:
        return

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –≤–≤–æ–¥–∞.
    lang = translator.detect(text)
    lang = lang.lang

    # –ï—Å–ª–∏ –≤–≤–æ–¥ –ø–æ —Ä—É—Å—Å–∫–∏, —Ç–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
    if lang == 'ru':
        send = translator.translate(text)
        results.append(types.InlineQueryResultArticle(
            id='1', title=send.text, input_message_content=types.InputTextMessageContent(
                message_text=send.text)))

    # –ò–Ω–∞—á–µ –¥—Ä—É–≥–æ–π —è–∑—ã–∫ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π {dest='ru'}.
    else:
        send = translator.translate(text, dest='ru')
        results.append(types.InlineQueryResultArticle(
            id='1', title=send.text, input_message_content=types.InputTextMessageContent(
                message_text=send.text)))

    await bot.answer_inline_query(query.id, results)

# –ó–∞–ø—É—Å–∫ –∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏ —Å–±–æ–µ.
asyncio.run(bot.infinity_polling())